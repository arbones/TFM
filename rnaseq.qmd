---
title: "Bulk RNAseq"
execute: 
  echo: true
  warning: false
format:
  html:
    code-fold: true
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(cowplot)
library(DESeq2)
library(org.Hs.eg.db)
library(clusterProfiler)


# libraries for visualization
library(cowplot)
library(ggpubr)
library(EnhancedVolcano)
library(kableExtra)

conflicted::conflicts_prefer(dplyr::select(), 
                             dplyr::filter(),
                             base::setdiff)

options(scipen=999)
```


## Introduction

Recent advancements in omics technologies and the decreasing costs of next-generation sequencing (NGS) have transformed high-throughput data generation and analysis. Companies like Novogene and BGI, which specialize in outsourcing, have played a key role in this shift. As these technologies evolve, the large volumes of data produced daily require advanced and customizable analytical methods.

There are two main types of analysis tools: graphical user interface (GUI) tools and command line interface (CLI) tools. GUI tools are user-friendly and accessible to researchers without advanced programming skills, offering robust capabilities for omics data analysis. These tools can be either web-based or local applications. Web-based applications, such as Galaxy or Partek Flow, are frequently updated and provide access to the latest database versions. However, they may be less stable compared to local applications, which are more reliable for reproducible results.

CLI tools, on the other hand, require bioinformatics expertise but offer greater flexibility and powerful features for customizing and automating complex analyses. Programs written in Bash, R, Python, Perl, and Groovy are particularly efficient for high-throughput data processing, especially in parallel computing environments. The open-source nature of R and Python, along with their extensive libraries and packages, has made them widely adopted in bioinformatics.

Specialized tools for pipeline development, such as Nextflow, Snakemake, WDL, and Cromwell, have enhanced the scalability and reproducibility of bioinformatics workflows. Nextflow stands out for its ability to adapt pipelines written in various scripting languages and for its active user community that maintains and shares curated nf-core pipelines.

In RNA sequencing (RNAseq) data analysis, a typical pipeline involves several stages: upstream data processing, quality control, visualization of count matrices, and downstream functional analysis. Different tools excel at various stages, and integrating these tools can create a more comprehensive and customized analytical approach. This project leverages the strengths of Nextflow's nf-core rnaseq pipeline and the versatility of R and its packages to develop a robust and flexible RNA-seq data analysis pipeline.

https://www.biorxiv.org/content/10.1101/2023.10.15.562329v3.full

## Experimental design


### RNA isolation and extraction

Total RNA was isolated from paired frozen biopsies of scWAT (n=80) and liver (n=80) by homogenizing the tissues in 1 ml of TRIzol per sample (Sigma Aldrich, #T9424) following the manufacturer’s protocol. The homogenates were transferred to a vial and incubated for 5 minutes at room temperature to dissociate nuclear components. Next, 0.2 ml of 100% chloroform per ml of TRIzol was added, shaken vigorously, incubated for 15 minutes at room temperature, and then centrifuged at 12,000 g for 15 minutes at 4°C.

After centrifugation, three phases were formed. The aqueous phase containing the RNA was isolated, and 0.5 ml of 100% isopropanol was added to precipitate the RNA. The mixture was incubated on ice for 10 minutes and centrifuged again at 12,000 g for 15 minutes at 4°C. The supernatant was removed by decanting, and the RNA pellet was resuspended in 1 ml of 75% ethanol for washing. The pellet was homogenized, centrifuged at 7,500 g for 5 minutes at 4°C, and the supernatant was removed. The pellet was then dried for 5 minutes at room temperature before resuspending the RNA in DEPC water. To remove any genomic DNA, the RNA samples were treated with RNase-Free DNase (Life Technologies). The concentration and purity of the RNA were measured by absorbance at 260/280 nm and 260/230 nm using a Nanodrop 2000 (Thermo Fisher).

### RNA quality assessment


```{r}

##### RIN numbers
rin <- read_csv("data/rin.csv")

# histogram decoration
gg_hist <- function(){list(
  geom_histogram(bins = 7, fill="darkgrey"),
        labs(x="RIN",y="Number of Samples\n"),
        scale_x_continuous(breaks = 4:10, limits = c(4,10)),
        theme_minimal(),
        theme(panel.grid.minor = element_blank(),
          axis.title = element_text(size=15),
          axis.text = element_text(size=12))
)} 

r1 <- ggplot(rin |> filter (tissue=="liver"), aes(RIN_SCT))+
        gg_hist()
        

r2 <- ggplot(rin |> filter (tissue=="scWAT"), aes(RIN_SCT))+
        gg_hist()
```

::: column-margin

```{r}
#| echo: false
#| label: fig-rin
#| fig-cap: "Histograms representing the distribution of RIN numbers across samples."
#| 
plot_grid(r2,r1,labels = c('scWAT', 'Liver'), 
          label_size=18,label_x = 0.3, ncol = 1)
```

:::

RNA integrity was assessed using the RNA integrity number (RIN). The RIN was measured with the Agilent 2200 TapeStation and the RNA ScreenTape assay, following the manufacturer’s protocol. For liver tissue samples, the average RIN was 6.8 ± 1.0, with values ranging from 4.8 to 8.9. In contrast, scWAT samples showed higher RNA integrity, with an average RIN of 8.1 ± 0.6, ranging from 6.3 to 9.0. The higher RIN values in scWAT suggest better RNA preservation, likely due to lower enzymatic activity that degrades RNA (@fig-rin).

### Stranded mRNA library construction, quality control and sequencing

The preparation of RNA libraries and sequencing was performed at the Novogene Cambridge Science Park (Cambridge, United Kingdom). Libraries were prepared using the Novogene NGS RNA Library Prep Set (PT042). Briefly, mRNA obtained with poly-T oligo-attached magnetic beads was fragmented and the first strand cDNA was synthesized using random hexamer primers. Then, the second strand cDNA was synthesized using dUTP, instead of dTTP. The directional library was ready after end repair, A-tailing, adapter ligation, enzyme digestion to remove UTP-containing second strand cDNA, size selection, PCR amplification, and purification.

Libraries were checked with Qubit and real-time PCR for quantification and bioanalyzer for size distribution detection. Five libraries (1 from liver and 4 from scWAT) did not meet the quality standards and were not sequenced. Libraries that passed quality controls were pooled and sequenced (2 x 150 bp) on Novaseq X Plus (Illumina), according to the effective library concentration and data amount.

### mRNAseq mapping and quantification workflow

We used the nf-core/rnaseq pipeline with Nextflow (version 23.10.1) to process RNA sequencing data (compressed fastq files). The analysis was containerized using Docker to ensure reproducibility. Input data, including sample metadata, was provided via a CSV file, and the workflow was performed by the [Biocomputation Core](https://www.iacs.es/servicios/biocomputacion/) on the Core Cluster of the Instituto Aragonés de Ciencias de la Salud. We employed the STAR aligner with Salmon for quantification, using the GRCh38.p13 reference genome and Gencode v40 gene annotations. The pipeline was configured to skip marking duplicate reads and using custom genome references rather than default settings. The workflow was based on the nf-core repository at [](https://github.com/nf-core/rnaseq).

### Quality control and reads preprocessing

In our study, the initial analysis of raw sequencing data from RNAseq experiments involving liver and subcutaneous adipose tissue (scWAT) showed similar average (mean ± sd) outputs before trimming, with liver samples yielding 50.4 ± 10 million reads per sample (forward + reverse) and scWAT 52.1 ± 11 million reads. The variability in sequencing depth between samples was evidenced by ranges extending from 31.0 to 85.3 million reads per sample for liver, and 20.3 to 83.0 million reads for scWAT. ([Multiqc report](docs/multiqcReport_rnaseq-RAW.html){target="_blank"})

Post-sequencing data processing with Cutadapt revealed a mean trimming percentage of 1.02 ± 0.19% for liver samples and 1.41 ± 0.44% for SCWAT, suggesting a higher incidence of adapter contamination or low-quality bases in SCWAT samples.

Mapping efficiencies, assessed using STAR, demonstrated robust alignment with an average of 89.6 ± 2.9% of sequences uniquely mapping to the reference genome (GRCh38) for liver samples, and a similar mapping performance 90.2 ± 1.64% for scWAT. Reads mapping to multiple loci were also similar between tissues, with 8.18 ± 1.59% for liver and 8.45 ± 1.46% for scWAT.

## Gene expression analysis according to steatosis using `DESeq2` 

The analysis began by loading essential R packages: `tidyverse` [@tidyverse]for data manipulation, `DESeq2` [@DESeq2] for differential expression analysis, and `org.Hs.eg.db` [@org.Hs.eg.db] for gene annotation. Metadata were imported, and sample identifiers were established as row names. Steatosis was recategorized into three distinct groups. Gene count data were subsequently loaded, and values were rounded to the nearest integer. To enhance the robustness of the analysis, we performed a pre-filtering step to keep only those genes that had a count > 15 in at least 30 samples (out of 155). Counts of the autosomal regions (PAR) were added to their homologous sequence. Gene identifiers initially provided in ENSEMBL format were converted to HGNC symbols via a mapping process that involved the creation of a dictionary through joins between the ensembl and symbol tables, linking ENSEMBL IDs to their respective HGNC counterparts. This conversion facilitated the utilization of more standardized and widely recognized gene names in subsequent analytical processes.

```{r}

###########################################
# Read metadata ########################### 
###########################################
 
meta_data <- read_csv("data/20240813_metadata.csv") |> 
  # set the 'prefix' column as row names
  column_to_rownames("prefix") |> 
  # recode steatosis categories into a new variable with only 3 levels
  mutate(steatosis_3cat=fct_recode(Steatosis,`>33%`=">33-66%",`>33%`=">66%"),
         steatosis_3cat=factor(steatosis_3cat,levels=c("<5%", "5-33%", ">33%")))




##########################################
# Read count data #######################
###########################################

counts0 <- read.delim("data/salmon.merged.gene_counts.tsv")


filter <- rowSums(counts0 >= 30) >= 30
counts_filtered <- counts0[filter,] |> 
  round(digits = 0)

#########################################################
# Map ENSEMBL gene IDs to HGNC symbols for compatibility with gene annotations
symb <- mapIds(org.Hs.eg.db, keys = str_sub(rownames(counts_filtered),1,15),
               column = c("SYMBOL"), keytype = "ENSEMBL")

# filter out untranslated genes
counts_na <- counts_filtered |> 
  mutate(symbol = symb, .before = 1) |> 
  filter(!is.na(symbol)) 

# sum the counts of duplicated genes (normaly pseudogenes)
counts <- counts_na |> 
  group_by(symbol) |> 
  mutate(across(everything(), \(x) sum(x))) |> 
  distinct(symbol,.keep_all = T) |> 
  ungroup() |> 
  column_to_rownames("symbol")
```

```{r}

# Create DESeqDataSet for scWAT data
# - Select columns from the counts matrix that start with "SC_" (scWAT samples)
# - Filter the metadata to include only scWAT samples
# - Specify the design formula to include gender (sexo) and steatosis categories (steatosis_3cat)
# - Indicate that the countData is not in tidy format (rows are genes, columns are samples)
dds_sc <- DESeqDataSetFromMatrix(
  countData = counts |> select(starts_with("SC_")),
  colData = meta_data |> filter(tissue == "scWAT"),
  design = ~ sexo + steatosis_3cat,
  tidy = FALSE
)

# Apply variance stabilizing transformation (VST) to scWAT data
# - Perform VST on the scWAT dataset without blinding to the experimental design
vst_sc <- vst(dds_sc, blind = FALSE)

# Create DESeqDataSet for liver data
# - Select columns from the counts matrix that start with "L_" (liver samples)
# - Filter the metadata to include only liver samples
# - Specify the design formula to include gender (sexo) and steatosis categories (steatosis_3cat)
dds_liver <- DESeqDataSetFromMatrix(
  countData = counts |> select(starts_with("L_")),
  colData = meta_data |> filter(tissue == "liver"),
  design = ~ sexo + steatosis_3cat
)

# Apply variance stabilizing transformation (VST) to liver data
# - Perform VST on the liver dataset without blinding to the experimental design
vst_liver <- vst(dds_liver, blind = FALSE)



```



### Data quality assessment

Data quality assessment and quality control are pivotal initial steps in any RNAseq analysis, particularly aimed at ensuring the fitness of data for detecting differentially expressed genes. These procedures are designed to identify and exclude samples and or data points compromised by experimental anomalies, thereby safeguarding the integrity of the analysis.

Boxplots in @fig-raw_counts1 display log2-transformed raw counts grouped by tissue and steatosis severity levels. The data across steatosis categories ("\<5%", "5-33%", "\>33%") are visualized with varying colors (gree, orange, and red) to highlight differences in expression profiles. In both scWAT and liver all samples showed similar dispersion and central tendencies in gene expression counts. The uniformity in distribution across all steatosis levels suggested that library depth and average counts per sample were consistent, precluding any library bias in the analysis.

```{r}
#| label: fig-raw_counts1
#| fig-cap: "Boxplots representing the distribution of log2-transformed read counts across samples (a: scWAT, b: liver), with distinct coloration representing different steatosis categories. Each box represents the interquartile range (IQR) of the counts, with the line inside the box denoting the median. The whiskers extend to show the range of the data, excluding outliers, which are plotted as individual points"
#| fig-height: 10
#| column: body-outset-right

########## scWAT ##############################################################
###############################################################################

# Extract counts data from DESeq2 object for scWAT and convert to a data frame
# Access raw counts data from the DESeq2 object (dds_sc)
counts_sc <- dds_sc@assays@data$counts |> 
  as.data.frame() |> 
  # Move gene names into a column named "gene"
  rownames_to_column("gene") |> 
  # Reshape the data from wide to long format with gene, sample, and counts columns
  pivot_longer(-"gene", names_to = "sample", values_to = "counts") |> 
  # Join the counts data with metadata to add sample information
  inner_join(meta_data |> rownames_to_column("prefix"), by = c("sample" = "prefix")) |> 
  # Ensure sample names are treated as characters
  mutate(sample.y = as.character(sample.y))

# Function for boxplot decoration
gg_box <- function() {
  list(
    # Add a boxplot geometry, remove missing values (na.rm = TRUE)
    geom_boxplot(na.rm = TRUE),
    # Apply a log2 transformation to the y-axis
    scale_y_continuous(trans = "log2"),
    # Add labels for the x and y axes
    labs(x = "\nSample", y = "Raw counts"),
    # Set custom fill colors for steatosis categories
    scale_fill_manual("Steatosis", values = c("#99c140", "#e7b416", "#db7b2b")),
    # Flip the coordinates to make the boxplots horizontal
    coord_flip(),
    # Apply a minimal theme for a clean appearance
    theme_minimal(),
    # Adjust the size of the axis titles
    theme(axis.title = element_text(size = 14))
  )
}

# Boxplot visualizing the log-transformed read counts across samples grouped by steatosis categories
p1 <- ggplot(counts_sc, aes(x = reorder(sample.y, as.numeric(steatosis_3cat)),
                            # Add 1 to counts for log transformation, and fill by steatosis category
                            y = counts + 1, fill = steatosis_3cat)) +
      # Apply the gg_box function for consistent styling
      gg_box()


########## liver ##############################################################

# Extract counts data from DESeq2 object for liver and convert to a data frame
# Access raw counts data from the DESeq2 object (dds_liver)
counts_liver <- dds_liver@assays@data$counts |> 
  as.data.frame() |> 
  # Move gene names into a column named "gene"
  rownames_to_column("gene") |> 
  # Reshape the data from wide to long format with gene, sample, and counts columns
  pivot_longer(-"gene", names_to = "sample", values_to = "counts") |> 
  # Join the counts data with metadata to add sample information
  inner_join(meta_data |> rownames_to_column("prefix"), by = c("sample" = "prefix")) |> 
  # Ensure sample names are treated as characters
  mutate(sample.y = as.character(sample.y))

# Boxplot visualizing the log-transformed read counts across samples grouped by steatosis categories
p2 <- ggplot(counts_liver, aes(x = reorder(sample.y, as.numeric(steatosis_3cat)),
                               # Add 1 to counts for log transformation, and fill by steatosis category
                               y = counts + 1, fill = steatosis_3cat)) +
      # Apply the gg_box function for consistence
      gg_box()

# Combine the two boxplots (scWAT and liver) into a single figure with labeled panels
plot_grid(p1, p2, labels = c('a', 'b'))


```

To further observe the distribution of samples, read counts across samples were normalized using the variance stabilizing transformation (VST) [@tibshirani1988] and their dimension was reduced via principal component analysis (PCA) and visualized the results within combinations of the two principal components. The biplot (@fig-pca1) shows tight clusters for both scWAT (a) and liver (b) samples. This clustering indicates that samples within the same group (based on steatosis level or gender) have similar expression profiles, suggesting strong internal consistency.

```{r}
#| label: fig-pca1
#| fig-cap: "PCA representation of normalized counts"

# Calculate PCA for scWAT data using "sexo" and "steatosis_3cat" as factors, return PCA data
pca_data_sc <- plotPCA(vst_sc, c("sexo", "steatosis_3cat"), returnData = TRUE)   

# Calculate and round the percentage of variance explained by the first two principal components (PC1 and PC2)
percentVar <- round(100 * attr(pca_data_sc, "percentVar"))    

# Create a scatter plot for the first two principal components (PC1 and PC2) for scWAT data
p3 <- ggplot(pca_data_sc, aes(PC1, PC2, color = steatosis_3cat, shape = sexo)) +
  geom_point(size = 3) +   
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +  
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +   
  coord_fixed() +    # Set aspect ratio to be equal
  scale_color_manual("Steatosis", values = c("#99c140","#e7b416","#db7b2b")) +   
  theme_minimal() +  
  theme(legend.position = "none")    # Hide legend

# Calculate PCA for liver data using "sexo" and "steatosis_3cat" as factors, return PCA data
pca_data_liver <- plotPCA(vst_liver, c("sexo", "steatosis_3cat"), returnData = TRUE)   

# Calculate and round the percentage of variance explained by PC1 and PC2 for liver data
percentVar <- round(100 * attr(pca_data_liver, "percentVar"))    

# Create a scatter plot for the first two principal components (PC1 and PC2) for liver data
p4 <- ggplot(pca_data_liver, aes(PC1, PC2, color = steatosis_3cat, shape = sexo)) +
  geom_point(size = 3) +    
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +    
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +   
  scale_color_manual("Steatosis", values = c("#99c140","#e7b416","#db7b2b")) +    
  coord_fixed() +    # Set aspect ratio to be equal
  theme_minimal()    

# Combine the two PCA plots (scWAT and liver) into a single figure with labeled panels
plot_grid(p3, p4, labels = c('scWAT', 'Liver'))    

```


### Differential expression in scWAT

#### Modeling raw counts

In our study, the `DESeq2` package was employed to analyze differential gene expression across scWAT samples with varying degrees of liver steatosis. Initially, we configured the `DESeq2` object using the Likelihood Ratio Test (LRT) method, suitable for handling complex comparisons involving multiple levels of a factor.

```{r}

# Perform differential expression analysis for scWAT data
# Run DESeq2 using the likelihood ratio test (LRT) controlling for the effect of gender (sexo)
dex_sc <- DESeq(dds_sc, test = "LRT", reduced = ~ sexo)    



```

Under the hood of the `DESeq` function the normalization of count data was performed using the median of ratios method, ensuring that variations in library size did not bias the analysis. This method adjusted each sample's read counts by a size factor, calculated to equalize the median of ratios across all samples (@fig-fs_sc). 

```{r}
#| label: fig-fs_sc
#| fig-cap: "Calculated factor sizes for each sample using the median of ratios method."  
#| fig-height: 10

## Extract and visualize size factors from the DESeq2 object
sizeFactors(dex_sc) |> as.data.frame() |> 
  rownames_to_column("Sample") |> 
  dplyr::rename(`Size Factors`= "sizeFactors(dex_sc)") |> 
  mutate(Sample = str_sub (Sample, 4,6)) |> 
  ggplot(aes(x=Sample, y= `Size Factors`))+
  geom_col(col="darkgrey", fill = "grey")+
  coord_flip()+
  theme_minimal()
```

To address the intrinsic variability in count data, `DESeq2` estimates gene-wise dispersion, which reflects the variance deviation from the mean for each gene. This step is crucial because RNA-seq data typically exhibit variance that exceeds the mean, particularly when expression levels are low. Dispersion parameters were calculated for each gene (Black dots in @fig-disp_sc), taking into account the mean expression levels and observed variance.

```{r}
#| label: fig-disp_sc
#| fig-cap: "Dispersion plot. Black dots represents single genes and the intial maximum likelihood dispersion estimate (MLE) given the observed data, the red line is the fitted curve to gene-wise dispersion estimates, while blue dots are the shrunken gene-wise dispersion estimates."


# Generate a plot of dispersion estimates using the DESeq2 object
d2 <- plotDispEsts(dex_sc)




```

The gene-wise dispersions were then modeled through a curve-fitting process, to generalize dispersion behavior across the dataset. The curve, represented in red in @fig-disp_sc, illustrates the inverse relationship between mean expression and dispersion, a typical observation in RNA-seq data. The final analytical step involved shrinking the initial raw dispersion estimates towards the values predicted by the fitted curve (Blue dots). 

Our analysis revealed a pattern where dispersion generally decreased with increasing mean expression levels, indicating a stable and consistent data quality across our sample set. The limited shrinkage observed was attributable to the large number of biological replicates, which provided a robust basis for the dispersion estimates. 

#### Testing for differential expression

```{r}

# Use DESeq2 to extract results from the differential expression analysis with FDR adjustment
res_sc <- results(dex_sc, pAdjustMethod = "fdr", independentFiltering = TRUE)

# Convert the results to a data frame for easier manipulation
res_sc_df <- res_sc |> 
  as.data.frame()

# Filter the results to identify significantly differentially expressed genes (DEGs)
# Keep only those genes with an adjusted p-value (padj) less than 0.05
degs_sc <- res_sc_df |> 
  filter(padj < 0.05)

# Count the number of upregulated genes (log2FoldChange > 0)
up <- sum(res_sc_df$log2FoldChange > 0, na.rm = TRUE)

# Count the number of downregulated genes (log2FoldChange < 0)
down <- sum(res_sc_df$log2FoldChange < 0, na.rm = TRUE)

```


In our differential expression analysis using `DESeq2` with the LRT model, we initially identified `r up` genes as upregulated and `r down` as downregulated in the subcutaneous white adipose tissue (scWAT) of individuals with the highest steatosis compared to those with no steatosis. However, after applying a stringent false discovery rate (FDR) cutoff of less than 0.05, the number of statistically significant differentially expressed genes (DEGs) was greatly reduced to `r nrow(degs_sc)`. Of these, only `r sum(degs_sc$log2FoldChange>0)` genes were found to be upregulated, while `r sum(degs_sc$log2FoldChange<0)` were downregulated (@tbl-degs_sc)


```{r}
#| label: tbl-degs_sc
#| tbl-cap: "Differentially expressed genes (DEGs) in scWAT. fdr: false discovery rate"

# Select relevant columns from the significant DEGs in scWAT data
degs_sc |> 
  # Select the log2 fold change, p-value, and adjusted p-value (FDR)
  select(log2FoldChange, pvalue, fdr = "padj") |> 
  # Arrange the results by the FDR (adjusted p-value) in ascending order
  arrange(fdr) |> 
  # Create a formatted table with specified number of digits for each column
  kbl(digits = c(2, 5, 3)) |> 
  # Apply striped styling to the table for better visual presentation
  kable_styling("striped")

```

In this regard, the volcano plot (@fig-volcano_sc) illustrates the differential expression of genes in subcutaneous white adipose tissue (scWAT) according to liver steatosis. Among the thousands of genes analyzed, those genes displayed in red showed both statistically significant p-values (FDR < 0.05) and substantial changes in expression (Log2 FC > 1).

```{r}
#| label: fig-volcano_sc
#| fig-cap: "Volcano plot showing DEGs (in red) in individuals with the highest (>33%) compared to the lowest (<5%) degree of steatosis."
#| column: body-outset-right


# Create a volcano plot for differentially expressed genes (DEGs) in scWAT
EnhancedVolcano(res_sc,
    # Label the points on the plot with gene names from the rownames of res_sc
    lab = rownames(res_sc),
    # Set the main title of the plot
    title = "Differentially expressed genes (DEGs) in scWAT",
    # Set the subtitle indicating the comparison groups
    subtitle = ">33%  vs. <5% steatosis",
    # Customize the legend labels for different categories of DEGs
    legendLabels = c("NS", expression(Log[2] ~ FC  > 1), "FDR < 0.05", expression( FDR < 0.05 ~ and ~ Log[2] ~ FC  > 1)),
    # Set the caption below the plot (empty in this case)
    caption = "",
    # Set the size of the labels on the plot
    labSize = 4,
    # Position the legend to the right of the plot
    legendPosition = 'right',
    # Draw lines connecting labels to their corresponding points
    drawConnectors = TRUE,
    # Connect labels to points in both directions (from left and right)
    directionConnectors = "both",
    # Allow for an infinite number of overlapping points to be labeled
    max.overlaps = Inf,
    # Set the fold change cutoff for highlighting DEGs
    FCcutoff = 1,
    # Specify the column to use for the p-value cutoff
    pCutoffCol = "padj",
    # Set the p-value cutoff for significance
    pCutoff = 0.05,
    # Set the x-axis to represent log2 fold change
    x = 'log2FoldChange',
    # Set the y-axis to represent the p-value
    y = 'pvalue')


```

Following their identification, we further analyzed the expression patterns of these `r nrow (degs_sc)` DEGs by representing their normalized counts in boxplots across the three steatosis groups (@fig-box_sc). This approach allows us to observe how the expression of these significant genes varies across different degrees of steatosis, offering deeper insights into the potential role these genes play in the progression of steatosis. The boxplots highlight the consistency of expression changes across groups, reinforcing the relevance of these DEGs in the context of steatosis severity.


```{r}
#| fig-height: 10
#| label: fig-box_sc
#| fig-cap: "Boxplots of the differentially expressed genes (DEGs) in scWAT according to the 3 groups of steatosis.<br>Each box represents the interquartile range (IQR) of the normalized counts, with the line inside the box denoting the median. The whiskers extend to show the range of the data, excluding outliers, which are plotted as individual points.<br>p: p-value for the Kruskal-Wallis test for the comparison between groups."
#| column: body-outset-right
            

# Normalize the counts for scWAT data and transpose the matrix
counts_norm_sc <- t(counts(dex_sc, normalized = TRUE))

# Subset the metadata for scWAT to match the normalized counts
meta_data_sc <- meta_data[rownames(counts_norm_sc), c("sexo", "steatosis_3cat")]

# Create a data frame combining normalized counts with metadata
# Convert the transposed counts to a data frame
sc <- as.data.frame(counts_norm_sc) |> 
  # Select columns corresponding to the DEGs identified in scWAT
  select(rownames(degs_sc)) |> 
  # Bind the selected DEGs with the corresponding metadata
  bind_cols(meta_data_sc) |> 
  # Reshape the data to long format for ggplot, with Gene and Normalized Counts columns
  pivot_longer(1:nrow(degs_sc), names_to = "Gene", values_to = "Normalized Counts") |> 
  # Add 1 to avoid infinity in the log scale 
  mutate(`Normalized Counts`=`Normalized Counts` + 1)



# Function for decorating boxplots of DEGs
gg_degs <- function() { 
  list(
    # Apply a log2 transformation to the y-axis (normalized counts)
    scale_y_continuous(trans = "log2"),
    # Set the x-axis label to "Steatosis"
    labs(x = "\nSteatosis"),
    # Add a boxplot geometry with specified width and no outliers
    geom_boxplot(width = 0.5, outliers = FALSE),
    # Add jittered points for individual observations with transparency
    geom_jitter(width = 0.25, size = 2, alpha = 0.3),
    # Add statistical comparison (Kruskal-Wallis test) labels to the plot
    stat_compare_means(aes(label = paste0("p= ", ..p.format..)), 
                       method = "kruskal.test",
                       label.x.npc = 0.3,
                       label.y.npc = 0.8,
                       size = 4),
    # Set custom fill colors for the steatosis categories
    scale_fill_manual(values = c("#99c140", "#e7b416", "#db7b2b")),
    # Apply a minimal theme for clean appearance
    theme_minimal(),
    # Create facets for each gene, allowing free scaling on the y-axis, with 4 columns of facets
    facet_wrap(~ Gene, scales = "free_y", ncol = 4),
    # Customize theme elements: remove legend, adjust text sizes, and rotate x-axis labels
    theme(legend.position = "none",
          strip.text = element_text(size = 13),
          axis.title = element_text(size = 13),
          axis.text.y = element_text(size = 11),
          axis.text.x = element_text(size = 12, angle = 20))
  )
}

##############################################

# Plot the normalized counts across steatosis categories for each DEG in scWAT
ggplot(sc, aes(x = steatosis_3cat, y = `Normalized Counts`, fill = steatosis_3cat)) +
  # Apply the custom ggplot decorations for DEGs
  gg_degs()


```

#### Gene ontology enrichment

Lastly, in our RNAseq analysis of subcutaneous adipose tissue (scWAT) from individuals with varying degrees of steatosis, we identified specific molecular functions associated with selected DEGs through gene ontology (GO) analysis. The @tbl-go_sc summarizes those molecular functions significantly enriched . Thus,  semaphorin receptor binding and chemorepellent activity were up-regulated in the steatotic conditions, while multiple functions related to fatty acid metabolism, lipid transport, microtubule binding, cyclic nucleotide signaling, and nucleic acid processing where appeared down-regulated. This enrichment analysis sheds light on the molecular functions most impacted by steatosis and provides a deeper understanding of the biological processes that are differentially regulated in scWAT as steatosis progresses.

```{r}
#| label: tbl-go_sc
#| tbl-cap: "Gene ontology (GO) analysis to detect enriched molecular functions of up- and down-regulated genes in individuals with the highest (>33%) compared to the lowest (<5%) degree of steatosis.  "
#| column: body-outset-right

### Gene Ontology (Molecular Function) ###

# Flag up- and down-regulated genes based on adjusted p-value and log2 fold change
go_sc <- res_sc |> 
  as.data.frame() |>
  mutate(q_0.1 = case_when(
    padj < 0.05 & log2FoldChange > 0 ~ 1,    # Flag genes as upregulated (1) if padj < 0.05 and log2FoldChange > 0
    padj < 0.05 & log2FoldChange < 0 ~ -1,   # Flag genes as downregulated (-1) if padj < 0.05 and log2FoldChange < 0
    .default = 0                             # All other genes are flagged as 0 (not significantly regulated)
  ))

# Extract upregulated genes
go_sc_up_00  <- go_sc |> 
  rownames_to_column("gene") |> 
  filter(q_0.1 == 1) |>           # Filter for upregulated genes
  pull(gene)                      # Pull the gene names into a vector

# Perform GO enrichment analysis for upregulated genes
go_sc_up_0 <- enrichGO(gene = go_sc_up_00, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF", 
  qvalueCutoff = 0.05, pAdjustMethod = "fdr")    # Enrichment analysis for molecular function (MF)

# Convert the result to a data frame and add a regulation label ("Up")
go_sc_up <- as.data.frame(go_sc_up_0) |> 
  mutate(regulation = "Up")

# Extract downregulated genes
go_sc_down_00  <- go_sc |> 
  rownames_to_column("gene") |> 
  filter(q_0.1 == -1) |>          # Filter for downregulated genes
  pull(gene)                      # Pull the gene names into a vector

# Perform GO enrichment analysis for downregulated genes
go_sc_down_0 <- enrichGO(gene = go_sc_down_00, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF", 
  pvalueCutoff = 0.1, qvalueCutoff = 0.05, pAdjustMethod = "fdr")    # Enrichment analysis for molecular function (MF)

# Convert the result to a data frame and add a regulation label ("Down")
go_sc_down <- as.data.frame(go_sc_down_0) |> 
  mutate(regulation = "Down")

# Create a table combining up- and down-regulated genes and their GO terms
bind_rows(go_sc_up, go_sc_down) |> 
  arrange(desc(regulation), geneID) |>  # Arrange by regulation status and geneID
  select(regulation, geneID, `GO molecular function` = "Description", `GO ID` = "ID", qvalue ) |>  # Select relevant columns
  kbl(digits=3) |>                     # Format the table with 3 decimal places
  kable_styling("striped")             # Apply striped styling to the table

```



### Differential expression in liver


#### Modeling raw counts

For this study we also investigated the differential gene expression across liver biopsies with varying degrees of steatosis. To this end the `DESeq2` object was also set using the Likelihood Ratio Test (LRT) method.

```{r}

# Perform differential expression analysis for liver data
# Run DESeq2 using the likelihood ratio test (LRT) controlling for the effect of gender (sexo)
dex_liver <- DESeq(dds_liver,test = "LRT",  reduced = ~ sexo)

```

In the liver tissue analysis, the first step involved calculating the size factor of the libraries to equalize the median of ratios across all samples (@fig-fs_liver). 

```{r}
#| label: fig-fs_liver
#| fig-cap: "Calculated factor sizes for each sample using the median of ratios method."  
#| fig-height: 10

# Extract and visualize size factors from the DESeq2 object
sizeFactors(dex_liver) |> as.data.frame() |> 
  rownames_to_column("Sample") |> 
  dplyr::rename(`Size Factors`= "sizeFactors(dex_liver)") |> 
  mutate(Sample = str_sub (Sample, 4,6)) |> 
  ggplot(aes(x=Sample, y= `Size Factors`))+
  geom_col(col="darkgrey", fill = "grey")+
  coord_flip()+
  theme_minimal()
```

We next assessed the variation in gene expression in liver tissue by modeling gene-wise dispersions through a curve-fitting process. Consistent with our observations in the scWAT analysis, the liver data revealed that dispersion generally decreased as mean expression levels increased (@fig-disp_liver). The limited shrinkage of dispersion estimates, as seen in scWAT, can be attributed to the large number of biological replicates.

```{r}
#| label: fig-disp_liver
#| fig-cap: "Dispersion plot. Black dots represents single genes and the intial maximum likelihood dispersion estimate (MLE) given the observed data, the red line is the fitted curve to gene-wise dispersion estimates, while blue dots are the shrunken gene-wise dispersion estimates."

# Generate a plot of dispersion estimates using the DESeq2 object
d2 <- plotDispEsts(dex_liver)



```


#### Testing for differential expression

```{r}

# Use DESeq2 to extract results from the differential expression analysis with FDR adjustment
res_liver <- results(dex_liver, pAdjustMethod = "fdr", independentFiltering = TRUE)

# Convert the results to a data frame for easier manipulation
res_liver_df <- res_liver |> 
  as.data.frame()

# Filter the results to identify significantly differentially expressed genes (DEGs)
# Keep only those genes with an adjusted p-value (padj) less than 0.05
degs_liver <- res_liver_df |> 
  filter(padj < 0.05)

# Count the number of upregulated genes (log2FoldChange > 0)
up <- sum(res_liver_df$log2FoldChange > 0, na.rm = TRUE)

# Count the number of downregulated genes (log2FoldChange < 0)
down <- sum(res_liver_df$log2FoldChange < 0, na.rm = TRUE)

```


In our differential expression analysis using `DESeq2` with the LRT model, we initially identified `r up` genes as upregulated and `r down` as downregulated in the liver of individuals with the highest steatosis compared to those with no steatosis. However, when applying a stringent false discovery rate (FDR) cutoff of less than 0.05 to identify statistically significant differentially expressed genes (DEGs), the number of significant DEGs was markedly reduced to `r nrow(degs_liver)`. Among these, only `r sum(degs_liver$log2FoldChange>0)` genes were found to be upregulated, while `r sum(degs_liver$log2FoldChange<0)` were downregulated (@tbl-degs_liver). The volcano plot (@fig-volcano_liver) illustrates the differential expression of genes in the liver according to steatosis. Among the thousands of genes analyzed, only IGFBP2 showed FDR < 0.05 and substantial changes in expression (Log2 FC > 1).

```{r}
#| label: tbl-degs_liver
#| tbl-cap: "Differentially expressed genes (DEGs) in liver. fdr: false discovery rate"

# Select relevant columns from the significant DEGs in liver data
degs_liver |> 
  # Select the log2 fold change, p-value, and adjusted p-value (FDR)
  select(log2FoldChange, pvalue, fdr = "padj") |> 
  # Arrange the results by the FDR (adjusted p-value) in ascending order
  arrange(fdr) |> 
  # Create a formatted table with specified number of digits for each column
  kbl(digits = c(2, 5, 3)) |> 
  # Apply striped styling to the table for better visual presentation
  kable_styling("striped")

```

```{r}
#| label: fig-volcano_liver
#| fig-cap: "Volcano plot showing liver DEGs (in red) in individuals with the highest (>33%) compared to the lowest (<5%) degree of steatosis."
#| column: body-outset-right

# Create a volcano plot for differentially expressed genes (DEGs) in liver
EnhancedVolcano(res_liver,
    # Label the points on the plot with gene names from the rownames of res_liver
    lab = rownames(res_liver),
    # Set the main title of the plot
    title = "Differentially expressed genes (DEGs) in liver",
    # Set the subtitle indicating the comparison groups
    subtitle = ">33%  vs. <5% steatosis",
    # Customize the legend labels for different categories of DEGs
    legendLabels = c("NS", expression(Log[2] ~ FC  > 1), "FDR < 0.05", expression(FDR < 0.05 ~ and ~ Log[2] ~ FC  > 1)),
    # Set the caption below the plot (empty in this case)
    caption = "",
    # Highlight only the selected DEGs in the plot
    selectLab = rownames(degs_liver),
    # Set the size of the labels on the plot
    labSize = 4,
    # Position the legend to the right of the plot
    legendPosition = 'right',
    # Draw lines connecting labels to their corresponding points
    drawConnectors = TRUE,
    # Connect labels to points in both directions (from left and right)
    directionConnectors = "both",
    # Allow for an infinite number of overlapping points to be labeled
    max.overlaps = Inf,
    # Set the fold change cutoff for highlighting DEGs
    FCcutoff = 1,
    # Specify the column to use for the p-value cutoff
    pCutoffCol = "padj",
    # Set the p-value cutoff for significance
    pCutoff = 0.05,
    # Set the x-axis to represent log2 fold change
    x = 'log2FoldChange',
    # Set the y-axis to represent the p-value
    y = 'pvalue')

```


After identifying the DEGs in the liver, we analyzed their expression patterns using boxplots across the three steatosis groups (@fig-box_liver). Most of these boxplots revealed a clear, ordered, and stepwise pattern of gene expression, with expression levels consistently and progressively changing as steatosis severity increased from low (<5%) to medium, and then to high (>33%). This graded response suggests that these genes are closely linked to the progression of steatosis, highlighting their potential role as key markers or drivers in the development of the condition.

```{r}
#| fig-height: 10
#| label: fig-box_liver
#| fig-cap: "Boxplots of the differentially expressed genes (DEGs) in liver according to the 3 groups of steatosis.<br>Each box represents the interquartile range (IQR) of the normalized counts, with the line inside the box denoting the median. The whiskers extend to show the range of the data, excluding outliers, which are plotted as individual points.<br>p: p-value for the Kruskal-Wallis test for the comparison between groups."
#| column: body-outset-right            



# Normalize the counts for liver data and transpose the matrix
counts_norm_liver <- t(counts(dex_liver, normalized = TRUE))

# Subset the metadata for liver to match the normalized counts
meta_data_liver <- meta_data[rownames(counts_norm_liver), c("sexo", "steatosis_3cat")]

# Create a data frame combining normalized counts with metadata
# Convert the transposed counts to a data frame
liver <- as.data.frame(counts_norm_liver) |> 
  # Select columns corresponding to the DEGs identified in liver data
  select(rownames(degs_liver)) |> 
  # Bind the selected DEGs with the corresponding metadata
  bind_cols(meta_data_liver) |> 
  # Reshape the data to long format for ggplot, with Gene and Normalized Counts columns
  pivot_longer(1:nrow(degs_liver), names_to = "Gene", values_to = "Normalized Counts") |> 
  # Add 1 to the normalized counts to avoid issues with log transformation
  mutate(`Normalized Counts` = `Normalized Counts` + 1)

# Plot the normalized counts across steatosis categories for each DEG in liver
ggplot(liver, aes(x = steatosis_3cat, y = `Normalized Counts`, fill = steatosis_3cat)) +
  # Apply the custom ggplot decorations for DEGs (using the gg_degs function defined earlier)
  gg_degs()

  


```

#### Gene ontology enrichment

Lastly, in our RNAseq analysis of liver tissue from individuals with varying degrees of steatosis, we identified specific molecular functions associated with selected DEGs through gene ontology (GO) enrichment analysis. The @tbl-go_liver summarizes the molecular functions that were significantly enriched. For instance, cytokine activity was upregulated, as indicated by the enrichment of *IL32*. In contrast, various functions related to oxidative stress, lipid metabolism, and enzyme activity, such as aldo-keto reductase activity, cholesterol binding, steroid binding, and oxidoreductase activity, were downregulated, involving genes like *AKR7A3*, *APOF*, and *CYP3A4*. Additionally, functions related to protease binding and growth factor binding, linked to genes such as *SERPINA1*, *SERPINA3*, and *IGFBP2*, were also downregulated. This GO enrichment analysis provides insights into the molecular functions most affected by steatosis in liver tissue, offering a deeper understanding of the biological processes that are differentially regulated as steatosis progresses.

```{r}
#| label: tbl-go_liver
#| tbl-cap: "Gene ontology (GO) analysis to detect enriched molecular functions of up- and down-regulated genes in individuals with the highest (>33%) compared to the lowest (<5%) degree of steatosis."
#| column: body-outset-right

### Gene Ontology (Molecular Function) ###

# Flag up- and down-regulated genes based on adjusted p-value and log2 fold change
go_liver <- res_liver |> 
  as.data.frame() |>
  mutate(q_0.1 = case_when(
    padj < 0.05 & log2FoldChange > 0 ~ 1,    # Flag genes as upregulated (1) if padj < 0.05 and log2FoldChange > 0
    padj < 0.05 & log2FoldChange < 0 ~ -1,   # Flag genes as downregulated (-1) if padj < 0.05 and log2FoldChange < 0
    .default = 0                             # All other genes are flagged as 0 (not significantly regulated)
  ))

# Extract upregulated genes
go_liver_up_00  <- go_liver |> 
  rownames_to_column("gene") |> 
  filter(q_0.1 == 1) |>           # Filter for upregulated genes
  pull(gene)                      # Pull the gene names into a vector

# Perform GO enrichment analysis for upregulated genes
go_liver_up_0 <- enrichGO(gene = go_liver_up_00, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF", 
  qvalueCutoff = 0.05, pAdjustMethod = "fdr")    # Enrichment analysis for molecular function (MF)

# Convert the result to a data frame and add a regulation label ("Up")
go_liver_up <- as.data.frame(go_liver_up_0) |> 
  mutate(regulation = "Up")

# Extract downregulated genes
go_liver_down_00  <- go_liver |> 
  rownames_to_column("gene") |> 
  filter(q_0.1 == -1) |>          # Filter for downregulated genes
  pull(gene)                      # Pull the gene names into a vector

# Perform GO enrichment analysis for downregulated genes
go_liver_down_0 <- enrichGO(gene = go_liver_down_00, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL", ont = "MF", 
  pvalueCutoff = 0.1, qvalueCutoff = 0.05, pAdjustMethod = "fdr")    # Enrichment analysis for molecular function (MF)

# Convert the result to a data frame and add a regulation label ("Down")
go_liver_down <- as.data.frame(go_liver_down_0) |> 
  mutate(regulation = "Down")

# Create a table combining up- and down-regulated genes and their GO terms
bind_rows(go_liver_up, go_liver_down) |> 
  arrange(desc(regulation), geneID) |>  # Arrange by regulation status and geneID
  select(regulation, geneID, `GO molecular function` = "Description", `GO ID` = "ID", qvalue ) |>  # Select relevant columns
  kbl(digits=3) |>                     # Format the table with 3 decimal places
  kable_styling("striped")             # Apply striped styling to the table

```

## Bibliography {.unnumbered}

::: {#refs}
:::